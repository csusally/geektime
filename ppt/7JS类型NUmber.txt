Atom
Grammer                     Runtime
·Literal                    ·Types
·Variable                   ·Execution Context
·Keywords
·whitespace
·Line Terminate

Types
·Number
    ·IEEE754 Double Float
        ·Sign(1)
        ·Exponent(11)()
        ·Fraction(52)
        Value = (-1)^sign*2^Exponent*Fraction
        所以 Exponent 增加一位，整个数值增大2倍，小数点则向右移1位；每减1，整个数值减小2倍，小数点则向左移动1位。
    ·Number Grammer
        ·DecimalLiteral
            ·0
            ·0.
            ·.2              0.toString() 这个语法冲突，不可以；
            ·1e3             0 .toString() 这里是语法冲突，要加空格来写 0..toString()也可以
        ·BinaryIntegerLiteral
            ·0b111
        ·OctalIntegerLiteral
            ·0o10
        ·HexIntegerLiteral
            ·0xFF
·String
·Boolean
·Object
·Null
·Undefined
·Symbol
·(BigInt)

Appendix(移码（增码），补码，反码)
反码：反码跟原码是正数时，一样；负数时，反码就是原码符号位除外，其他位按位取反。（1负0正）。

/*在介绍补码概念之前，先介绍一下“模”的概念：“模”是指一个计量系统的计数范围，如过去计量粮食用的斗、时钟等。计算机也可以看成一个计量机器，
因为计算机的字长是定长的，即存储和处理的位数是有限的，因此它也有一个计量范围，即都存在一个“模”。如：时钟的计量范围是0~11，模=12。
表示n位的计算机计量范围是，模=．“模”实质上是计量器产生“溢出”的量，它的值在计量器上表示不出来，计量器上只能表示出模的余数。任何有模的计量器，均可化减法为加法运算 [3] 。
就是取反后加1。*/

补码：正整数的补码是其二进制表示，与原码相同；求负整数的补码，将其原码除符号位外的所有位取反（0变1，1变0，符号位为1不变）后加1
（比反码多了个+1）
数0的补码表示是唯一的 [3]  。
[+0]补=[+0]反=[+0]原=00000000
[ -0]补=11111111+1=00000000


移码：移码（又叫增码或偏置码）通常用于表示浮点数的阶码，其表示形式与补码相似，只是其符号位用“1”表示正数，用“0”表示负数，数值部分与补码相同。
https://mp.weixin.qq.com/s/mf1mH-aGWgcC6v2R8ijE8A

科学计数法
0.8175 = 2^(-4) + 2^(-3) = 1.1_(2) * 2^(-3) = 1.5 * (1/8)

浮点数：(单精度；exponment 有 8bit 偏移值127(2^n - 1))
78 = 01001110_(2) = 1.001110 * 2^(6) 
sign: 0 
Exponent: 6(6+127 = 133_(10) = 10000101_(2))
Fraction:001110 = 1110 ; 最高位不储存；110
负数同：
-16 = -1.0*2^(4)
sign:1
Exponent:4+127 = 131 = 10000011_2
fraction:0





